{"version":3,"sources":["services/swapi-service.js","components/swapi-context/index.js","components/item-list/index.js","components/item-list/item-list.js","components/item-details/item-details.js","components/row/row.js","components/hoc/index.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/random-planet/index.js","components/random-planet/random-planet.js","components/header/index.js","components/header/header.js","components/app/app.js","components/app/index.js","index.js"],"names":["SwapiService","_apiBase","_imageBase","getResource","url","fetch","res","ok","Error","status","json","getAllPeople","a","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getStarshipImage","getPlanetImage","_extractId","item","match","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color","React","createContext","Provider","Consumer","ItemList","setItemId","children","getData","useState","data","state","setState","useEffect","then","content","onClick","className","Record","label","label_key","ItemDetails","itemId","getImage","itemImg","src","Children","cloneElement","Row","left","right","withSwapi","View","parseFunc","props","swapi","methods","NewItemList","NewItemDetails","PeoplePage","leftElement","rightElement","PlanetsPage","RandomPlanet","planetImg","updatePlanet","Math","floor","random","setInterval","Header","to","CustomLink","path","element","App","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ad14654.chunk.js","sourcesContent":["export default class SwapiService {\n\n  _apiBase = 'https://swapi.dev/api';\n  _imageBase = 'https://starwars-visualguide.com/assets/img';\n\n  getResource = async (url) => {\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` +\n        `, received ${res.status}`)\n    }\n    return await res.json();\n  };\n\n  getAllPeople = async () => {\n    const res = await this.getResource(`/people/`);\n    return res.results\n      .map(this._transformPerson)\n  };\n\n  getPerson = async (id) => {\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person);\n  };\n\n  getAllPlanets = async () => {\n    const res = await this.getResource(`/planets/`);\n    return res.results\n      .map(this._transformPlanet)\n  };\n\n  getPlanet = async (id) => {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  };\n\n  getAllStarships = async () => {\n    const res = await this.getResource(`/starships/`);\n    return res.results\n      .map(this._transformStarship)\n  };\n\n  getStarship = async (id) => {\n    const starship = await this.getResource(`/starships/${id}/`);\n    return this._transformStarship(starship);\n  };\n\n  getPersonImage = ({id}) => {\n    return `${this._imageBase}/characters/${id}.jpg`\n  };\n\n  getStarshipImage = ({id}) => {\n    return `${this._imageBase}/starships/${id}.jpg`\n  };\n\n  getPlanetImage = ({id}) => {\n    return `${this._imageBase}/planets/${id}.jpg`\n  };\n\n  _extractId = (item) => {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  };\n\n  _transformPlanet = (planet) => {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  };\n\n  _transformStarship = (starship) => {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargo_capacity\n    }\n  };\n\n  _transformPerson = (person) => {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    }\n  }\n}\n","import React from 'react'\n\nconst {Provider, Consumer} = React.createContext()\n\nexport {Provider, Consumer}","import ItemList from './item-list';\n\nexport default ItemList;\n","import React, { useState, useEffect } from 'react';\nimport './item-list.css';\n\n\n\n\nconst ItemList = ({ setItemId, children, getData }) => {\n  const [state, setState] = useState({ data: [] })\n\n\n  useEffect(() => {\n    getData()\n      .then(data => setState({ data }))\n  }, [])\n\n  const content = state.data.map(item => {\n    return (\n      <li key={item.id} onClick={() => setItemId(item.id)} className=\"list-group-item\">\n        {children(item)}\n      </li>\n    )\n  })\n  return (\n    <ul className=\"item-list list-group\">\n      {content}\n    </ul>\n  )\n\n}\nexport default ItemList;\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport './item-details.css';\nimport SwapiService from '../../services/swapi-service';\n\n\n\nconst Record = ({ label, label_key, data }) => {\n  return (\n    <li className=\"list-group-item\">\n      <span className=\"term\">{label}</span>\n      <span>{data[label_key]}</span>\n    </li>\n  )\n}\n\n\nconst ItemDetails = ({ itemId, children, getData, getImage }) => {\n\n  const [state, setState] = useState({ data: {} })\n  const { id, name } = state.data;\n\n  const swapi = new SwapiService() //Request to backend - json\n  \n  // const peopleImage = `https://starwars-visualguide.com/assets/img/characters/${id}.jpg`;\n  // const planetImage = `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`;\n\n  const itemImg = getImage({id})\n\n  useEffect(() => {\n    getData(itemId)\n      .then(data => {\n        setState({ data })\n      })\n  }, [itemId])\n\n  return (\n\n    <div className=\"item-details card\">\n      <img className=\"item-image\"\n        src={itemImg} />\n\n      <div className=\"card-body\">\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          {\n            React.Children.map(children, (item) => {\n              return React.cloneElement(\n                item,\n                { data: state.data }\n              )\n            })\n          }\n        </ul>\n      </div>\n    </div>\n    \n  );\n}\n\nexport { ItemDetails, Record };\n","import React from 'react'\n// import ItemList from '../item-list';\n// import ItemDetails from '../item-details';\n\n\nconst Row = ({ left, right }) => {\n\n  return (\n    <div className=\"row mb2\">\n      <div className=\"col-md-6\">\n        {left}\n      </div>\n      <div className=\"col-md-6\">\n        {right}\n      </div>\n    </div>\n  )\n}\n\nexport default Row;","import React from \"react\"\nimport {Consumer} from '../swapi-context'\n\nfunction withSwapi (View, parseFunc) {\n    const Wrapper = (props) => {\n    return (\n        <Consumer>\n            {\n                (swapi) => {\n                    const methods = parseFunc(swapi)\n                   return <View {...props} {...methods}/>\n                }\n            }\n        </Consumer>\n    )\n  \n    }\n    return Wrapper\n    \n}\n\nexport default withSwapi;","import React, { useState } from 'react'\nimport ItemList from '../item-list';\nimport { ItemDetails, Record } from '../item-details';\nimport Row from '../row/row';\nimport withSwapi from '../hoc';\n\n\nconst leftElementMethods = (swapi) => ({ getData: swapi.getAllPeople })\nconst NewItemList = withSwapi(ItemList, leftElementMethods)\n\n\nconst rightElemetMethods = (swapi) => ({ getData: swapi.getPerson, getImage: swapi.getPersonImage })\nconst NewItemDetails = withSwapi(ItemDetails, rightElemetMethods)\n\n\nconst PeoplePage = () => {\n\n  const [state, setState] = useState({ itemId: 1 })\n\n  const leftElement = (\n    <NewItemList setItemId={(id) => setState({ itemId: id })}>\n      {(item) => `${item.name}`}\n    </NewItemList>\n  )\n\n  const rightElement = (\n    <NewItemDetails itemId={state.itemId}>\n      <Record label='Gender:' label_key='gender' />\n      <Record label='Eye color:' label_key='eyeColor' />\n      <Record label='Birth year:' label_key='birthYear' />\n    </NewItemDetails>\n  )\n\n  return (\n    <Row left={leftElement} right={rightElement} />\n  )\n\n}\n\nexport default PeoplePage;","import React, { useState } from 'react'\r\nimport ItemList from '../item-list';\r\nimport { ItemDetails, Record } from '../item-details';\r\nimport Row from '../row/row';\r\nimport withSwapi from '../hoc';\r\n\r\n\r\nconst leftElementMethods = (swapi) => ({ getData: swapi.getAllPlanets })\r\nconst NewItemList = withSwapi(ItemList, leftElementMethods)\r\n\r\n\r\nconst rightElemetMethods = (swapi) => ({ getData: swapi.getPlanet, getImage: swapi.getPlanetImage })\r\nconst NewItemDetails = withSwapi(ItemDetails, rightElemetMethods)\r\n\r\nconst PlanetsPage = () => {\r\n\r\n  const [state, setState] = useState({ itemId: 2 })\r\n\r\n  const leftElement = (\r\n    <NewItemList setItemId={(id) => setState({ itemId: id })}>\r\n      {(item) => `${item.name}`}\r\n    </NewItemList>\r\n  )\r\n\r\n  const rightElement = (\r\n    <NewItemDetails itemId={state.itemId}>\r\n      <Record label='Population:' label_key='population' />\r\n      <Record label='Rotation period:' label_key='rotationPeriod' />\r\n      <Record label='Diameter:' label_key='diameter' />\r\n    </NewItemDetails>\r\n  )\r\n\r\n  return (\r\n    <Row left={leftElement} right={rightElement} />\r\n  )\r\n  \r\n}\r\n\r\nexport default PlanetsPage","import React, { useState } from 'react'\r\nimport ItemList from '../item-list';\r\nimport { ItemDetails, Record } from '../item-details';\r\nimport Row from '../row/row';\r\nimport withSwapi from '../hoc';\r\n\r\n\r\nconst leftElementMethods = (swapi) => ({ getData: swapi.getAllStarships })\r\nconst NewItemList = withSwapi(ItemList, leftElementMethods)\r\n\r\n\r\nconst rightElemetMethods = (swapi) => ({ getData: swapi.getStarship, getImage: swapi.getStarshipImage })\r\nconst NewItemDetails = withSwapi(ItemDetails, rightElemetMethods)\r\n\r\nconst PlanetsPage = () => {\r\n\r\n  const [state, setState] = useState({ itemId: 2 })\r\n\r\n  const leftElement = (\r\n    <NewItemList setItemId={(id) => setState({ itemId: id })}>\r\n      {(item) => `${item.name}`}\r\n    </NewItemList>\r\n  )\r\n\r\n  const rightElement = (\r\n    <NewItemDetails itemId={state.itemId}>\r\n      <Record label='Model:' label_key='model' />\r\n      <Record label='Manufacturer:' label_key='manufacturer' />\r\n      <Record label='Cost in credits:' label_key='costInCredits' />\r\n      <Record label='Length:' label_key='length' />\r\n      <Record label='Crew:' label_key='crew' />\r\n      <Record label='Passengers:' label_key='passengers' />\r\n      <Record label='Cargo capacity:' label_key='cargoCapacity' />\r\n    </NewItemDetails>\r\n  )\r\n\r\n  return (\r\n    <Row left={leftElement} right={rightElement} />\r\n  )\r\n  \r\n}\r\n\r\nexport default PlanetsPage","import RandomPlanet from './random-planet';\n\nexport default RandomPlanet;\n","import React, { useEffect, useState } from 'react';\nimport SwapiService from '../../services/swapi-service';\nimport './random-planet.css';\n\n\nconst RandomPlanet = () => {\n\n  const [state, setState] = useState({ data: {} })\n  const { id, name, population, rotationPeriod, diameter } = state.data;\n  const planetImg = `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`;\n  const swapi = new SwapiService() //Request to backend - json\n\n\n\n  const updatePlanet = () => {\n    const id = Math.floor(Math.random() * (20 - 1 + 1) + 1)\n    swapi.getPlanet(id)\n      .then(data => {\n        setState({ data: data })\n      })\n  }\n\n  useEffect(() => {\n    updatePlanet()\n    setInterval(() => updatePlanet(), 3000)\n  }, [])\n\n\n  return (\n    <div className=\"random-planet jumbotron rounded\">\n      <img className=\"planet-image\"\n        src={planetImg} />\n      <div>\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default RandomPlanet;\n\n\n\n\n\n// export default class RandomPlanet extends Component {\n// swapi = new SwapiService()\n\n// state = {\n//   data: {}\n// }\n\n// _updatePlanet = () => {\n//   const id = Math.floor(Math.random() * (20 - 1 + 1) + 1)\n\n//   this.swapi.getPlanet(id)\n//   .then(data => {\n//     this.setState({data: data})\n//   })\n// }\n\n// componentDidMount = () => {\n//   this._updatePlanet()\n//   setInterval(() => this._updatePlanet(), 3000)\n// }\n\n\n//   render() {\n\n//     const {id, name, population, rotationPeriod, diameter} = this.state.data ;\n//     const planetImg = `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`\n//     return (\n//       <div className=\"random-planet jumbotron rounded\">\n//         <img className=\"planet-image\"\n//              src={planetImg}/>\n//         <div>\n//           <h4>{name}</h4>\n//           <ul className=\"list-group list-group-flush\">\n//             <li className=\"list-group-item\">\n//               <span className=\"term\">Population</span>\n//               <span>{population}</span>\n//             </li>\n//             <li className=\"list-group-item\">\n//               <span className=\"term\">Rotation Period</span>\n//               <span>{rotationPeriod}</span>\n//             </li>\n//             <li className=\"list-group-item\">\n//               <span className=\"term\">Diameter</span>\n//               <span>{diameter}</span>\n//             </li>\n//           </ul>\n//         </div>\n//       </div>\n\n//     );\n//   }\n// }\n","import Header from './header';\n\nexport default Header;","import React, { Fragment } from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { PeoplePage, PlanetsPage, StarshipsPage } from '../pages/index';\nimport RandomPlanet from '../random-planet';\n\nimport './header.css';\n\nconst Header = () => {\n  return (\n\n    <Fragment>\n\n      <div className=\"header d-flex\">\n        <h3>\n          <Link to=\"/\">\n            Star Wars\n          </Link>\n        </h3>\n        <ul className=\"d-flex\">\n          <CustomLink to=\"/people\">People</CustomLink>\n          <CustomLink to=\"/planets\">Planets</CustomLink>\n          <CustomLink to=\"/starships\">Starships</CustomLink>\n        </ul>\n      </div>\n\n      <RandomPlanet />\n\n      <Routes>\n        <Route path='/people' element={<PeoplePage />} />\n        <Route path='/planets' element={<PlanetsPage />} />\n        <Route path='/starships' element={<StarshipsPage />} />\n      </Routes>\n\n    </Fragment>\n\n  );\n\n  function CustomLink({ to, children, ...props }) {\n    return (\n      <li>\n        <Link to={to} {...props}>\n          {children}\n        </Link>\n      </li>\n    )\n  }\n};\n\nexport default Header;","import React, { Fragment } from 'react';\nimport SwapiService from '../../services/swapi-service';\nimport { Provider } from '../swapi-context';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './app.css';\n\nimport Header from '../header';\nimport { PlanetsPage, PeoplePage } from '../pages/index'\n\n\nconst swapi = new SwapiService()\n\nconst App = () => {\n  return (\n    <Fragment>\n      <Provider value={swapi}>\n\n        <BrowserRouter>\n          <Header />\n        </BrowserRouter>\n\n        {/* <BrowserRouter>\n          <PeoplePage />\n          <PlanetsPage />\n        </BrowserRouter> */}\n      </Provider>\n    </ Fragment>\n  );\n};\n\nexport default App;","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />,\n  document.getElementById('root'));\n"],"sourceRoot":""}