{"ast":null,"code":"var _jsxFileName = \"/Users/Kirill/Front-end/Next.js/starWars/src/components/pages/planets-page.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ItemList from '../item-list';\nimport { ItemDetails, Record } from '../item-details';\nimport Row from '../row/row';\nimport withSwapi from '../hoc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst leftElementMethods = swapi => ({\n  getData: swapi.getAllPlanets\n});\nconst NewItemList = withSwapi(ItemList, leftElementMethods);\n_c = NewItemList;\nconst rightElemetMethods = swapi => ({\n  getData: swapi.getPlanet,\n  getImage: swapi.getPlanetImage\n});\nconst NewItemDetails = withSwapi(ItemDetails, rightElemetMethods);\n_c2 = NewItemDetails;\nconst PlanetsPage = () => {\n  _s();\n  const [state, setState] = useState({\n    itemId: 2\n  });\n  const leftElement = /*#__PURE__*/_jsxDEV(NewItemList, {\n    setItemId: id => setState({\n      itemId: id\n    }),\n    children: item => `${item.name}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n  const rightElement = /*#__PURE__*/_jsxDEV(NewItemDetails, {\n    itemId: state.itemId,\n    children: [/*#__PURE__*/_jsxDEV(Record, {\n      label: \"Population:\",\n      label_key: \"population\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Record, {\n      label: \"Rotation period:\",\n      label_key: \"rotationPeriod\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Record, {\n      label: \"Diameter:\",\n      label_key: \"diameter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    left: leftElement,\n    right: rightElement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetsPage, \"g5MdsH0o5Mv4bUJYsTJwlVKBTWA=\");\n_c3 = PlanetsPage;\nexport default PlanetsPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"NewItemList\");\n$RefreshReg$(_c2, \"NewItemDetails\");\n$RefreshReg$(_c3, \"PlanetsPage\");","map":{"version":3,"names":["React","useState","ItemList","ItemDetails","Record","Row","withSwapi","leftElementMethods","swapi","getData","getAllPlanets","NewItemList","rightElemetMethods","getPlanet","getImage","getPlanetImage","NewItemDetails","PlanetsPage","state","setState","itemId","leftElement","id","item","name","rightElement"],"sources":["/Users/Kirill/Front-end/Next.js/starWars/src/components/pages/planets-page.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport ItemList from '../item-list';\r\nimport { ItemDetails, Record } from '../item-details';\r\nimport Row from '../row/row';\r\nimport withSwapi from '../hoc';\r\n\r\n\r\nconst leftElementMethods = (swapi) => ({ getData: swapi.getAllPlanets })\r\nconst NewItemList = withSwapi(ItemList, leftElementMethods)\r\n\r\n\r\nconst rightElemetMethods = (swapi) => ({ getData: swapi.getPlanet, getImage: swapi.getPlanetImage })\r\nconst NewItemDetails = withSwapi(ItemDetails, rightElemetMethods)\r\n\r\nconst PlanetsPage = () => {\r\n\r\n  const [state, setState] = useState({ itemId: 2 })\r\n\r\n  const leftElement = (\r\n    <NewItemList setItemId={(id) => setState({ itemId: id })}>\r\n      {(item) => `${item.name}`}\r\n    </NewItemList>\r\n  )\r\n\r\n  const rightElement = (\r\n    <NewItemDetails itemId={state.itemId}>\r\n      <Record label='Population:' label_key='population' />\r\n      <Record label='Rotation period:' label_key='rotationPeriod' />\r\n      <Record label='Diameter:' label_key='diameter' />\r\n    </NewItemDetails>\r\n  )\r\n\r\n  return (\r\n    <Row left={leftElement} right={rightElement} />\r\n  )\r\n  \r\n}\r\n\r\nexport default PlanetsPage"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,cAAc;AACnC,SAASC,WAAW,EAAEC,MAAM,QAAQ,iBAAiB;AACrD,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,SAAS,MAAM,QAAQ;AAAC;AAG/B,MAAMC,kBAAkB,GAAIC,KAAK,KAAM;EAAEC,OAAO,EAAED,KAAK,CAACE;AAAc,CAAC,CAAC;AACxE,MAAMC,WAAW,GAAGL,SAAS,CAACJ,QAAQ,EAAEK,kBAAkB,CAAC;AAAA,KAArDI,WAAW;AAGjB,MAAMC,kBAAkB,GAAIJ,KAAK,KAAM;EAAEC,OAAO,EAAED,KAAK,CAACK,SAAS;EAAEC,QAAQ,EAAEN,KAAK,CAACO;AAAe,CAAC,CAAC;AACpG,MAAMC,cAAc,GAAGV,SAAS,CAACH,WAAW,EAAES,kBAAkB,CAAC;AAAA,MAA3DI,cAAc;AAEpB,MAAMC,WAAW,GAAG,MAAM;EAAA;EAExB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC;IAAEmB,MAAM,EAAE;EAAE,CAAC,CAAC;EAEjD,MAAMC,WAAW,gBACf,QAAC,WAAW;IAAC,SAAS,EAAGC,EAAE,IAAKH,QAAQ,CAAC;MAAEC,MAAM,EAAEE;IAAG,CAAC,CAAE;IAAA,UACrDC,IAAI,IAAM,GAAEA,IAAI,CAACC,IAAK;EAAC;IAAA;IAAA;IAAA;EAAA,QAE5B;EAED,MAAMC,YAAY,gBAChB,QAAC,cAAc;IAAC,MAAM,EAAEP,KAAK,CAACE,MAAO;IAAA,wBACnC,QAAC,MAAM;MAAC,KAAK,EAAC,aAAa;MAAC,SAAS,EAAC;IAAY;MAAA;MAAA;MAAA;IAAA,QAAG,eACrD,QAAC,MAAM;MAAC,KAAK,EAAC,kBAAkB;MAAC,SAAS,EAAC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAG,eAC9D,QAAC,MAAM;MAAC,KAAK,EAAC,WAAW;MAAC,SAAS,EAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAEpD;EAED,oBACE,QAAC,GAAG;IAAC,IAAI,EAAEC,WAAY;IAAC,KAAK,EAAEI;EAAa;IAAA;IAAA;IAAA;EAAA,QAAG;AAGnD,CAAC;AAAA,GAtBKR,WAAW;AAAA,MAAXA,WAAW;AAwBjB,eAAeA,WAAW;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}